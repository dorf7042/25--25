import re

def read_students_from_md(filename):
    """
    Чтение данных студентов из markdown файла с новыми метриками
    Возвращает список словарей с информацией о студентах
    """
    students = []
    try:
        with open(filename, 'r', encoding='utf-8') as file:
            content = file.read()
            
        # Регулярное выражение для поиска строк таблицы с новыми полями
        table_pattern = r'\|\s*(.+?)\s*\|\s*(.+?)\s*\|\s*(.+?)\s*\|\s*(\d{4})\s*\|\s*(\d+)\s*\|'
        matches = re.findall(table_pattern, content)
        
        for match in matches:
            full_name, group, college, admission_year, course = match
            if full_name.lower() != 'фио':  # Пропускаем заголовок
                students.append({
                    'full_name': full_name.strip(),
                    'group': group.strip(),
                    'college': college.strip(),
                    'admission_year': int(admission_year),
                    'course': int(course)
                })
                
    except FileNotFoundError:
        print(f"Ошибка: Файл {filename} не найден")
    except Exception as e:
        print(f"Ошибка при чтении файла: {e}")
        
    return students

def find_student(students, full_name):
    """
    Поиск студента по ФИО (регистронезависимый)
    """
    for student in students:
        if student['full_name'].lower() == full_name.lower():
            return student
    return None
class TestIntegration:
    """Интеграционные тесты всего приложения"""
    
    def test_complete_student_workflow(self):
        """Тест полного workflow приложения"""
        from app import read_students_from_md, find_student, generate_greeting
        
        # Чтение данных
        students = read_students_from_md('students.md')
        assert len(students) > 0
        
        # Поиск существующего студента
        if students:
            existing_student = find_student(students, students[0]['full_name'])
            assert existing_student is not None
            
            # Генерация приветствия
            greeting = generate_greeting(existing_student)
            assert existing_student['full_name'] in greeting
    
    def test_data_consistency(self):
        """Тест согласованности данных"""
        students = read_students_from_md('students.md')
        
        for student in students:
            # Проверяем, что курс соответствует году поступления
            expected_min_course = 2024 - student['admission_year'] + 1
            # Допускаем погрешность в 1 курс
            assert abs(student['course'] - expected_min_course) <= 1
    
    def test_file_modification_integration(self):
        """Тест интеграции с файловой системой"""
        import tempfile
        import os
        from app import read_students_from_md
        
        # Создаем временный файл для тестирования
        with tempfile.NamedTemporaryFile(mode='w', suffix='.md', delete=False) as f:
            f.write("""# Test Students
| ФИО | Группа | Колледж | Год поступления | Курс |
|-----|--------|---------|-----------------|------|
| Тест Студент | Т-001 | Тест колледж | 2023 | 2 |""")
            temp_filename = f.name
        
        try:
            students = read_students_from_md(temp_filename)
            assert len(students) == 1
            assert students[0]['full_name'] == 'Тест Студент'
        finally:
            os.unlink(temp_filename)
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Мой первый проект</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <header>
        <h1>Добро пожаловать в наш проект!</h1>
    </header>
    <main>
        <section id="about">
            <h2>О нашем проекте</h2>
            <p>Это наш первый проект с использованием Git и GitHub.</p>
        </section>
        <section id="team">
            <h2>Наша команда</h2>
            <ul>
                <li>Студент 1</li>
                <li>Студент 2</li>
            </ul>
        </section>
    </main>
    <footer>
        <p>&copy; 2024 Наша команда</p>
    </footer>
</body>
</html>

# Мой первый проект

Этот проект создан для изучения Git и GitHub.

## Команда
- [Николай]
- [Егор]

## Описание
Простой веб-сайт, созданный с использованием HTML и CSS.

# Отчет по подготовительному этапу

**Дата:** [дата выполнения]  
**Команда:** [Николай] и [Егор]

## Выполненные действия:

### Шаг 1.1: Проверка ПО
- [ ] Windows 11: ✅
- [ ] VS Code: ✅ 
- [ ] Git: ✅
- [ ] GitHub аккаунт: ✅

### Шаг 1.2: Настройка Git
- Имя пользователя: [Николай]
- Email: [dorf7042@gmail.com]
- Ветка по умолчанию: main

### Шаг 1.3: Проверка установки
- Версия Git: [введите версию]

## Проблемы и решения:
[Опишите возникшие проблемы и как их решили]

## Вывод:
[Опишите, что узнали на этом этапе]
# Отчет по подготовительному этапу

**Дата:** [дата выполнения]  
**Команда:** [Николай] и [Егор]

## Выполненные действия:

### Шаг 1.1: Проверка ПО
- [ ] Windows 11: ✅
- [ ] VS Code: ✅ 
- [ ] Git: ✅
- [ ] GitHub аккаунт: ✅

### Шаг 1.2: Настройка Git
- Имя пользователя: [Николай]
- Email: [dorf7042@gmail.com]
- Ветка по умолчанию: main

### Шаг 1.3: Проверка установки
- Версия Git: [введите версию]

## Проблемы и решения:
[Опишите возникшие проблемы и как их решили]

## Вывод:
[Опишите, что узнали на этом этапе]
body {
    font-family: Arial, sans-serif;
    line-height: 1.6;
    margin: 0;
    padding: 0;
    background-color: #f4f4f4;
}

header {
    background: #35424a;
    color: white;
    padding: 1rem;
    text-align: center;
}

main {
    padding: 2rem;
    max-width: 800px;
    margin: 0 auto;
    background: white;
}

section {
    margin-bottom: 2rem;
}

h1, h2 {
    color: #35424a;
}

footer {
    background: #35424a;
    color: white;
    text-align: center;
    padding: 1rem;
    position: fixed;
    bottom: 0;
    width: 100%;
}
html
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Task 2.1 - Тестовый интерфейс</title>
    <style>
        .container { max-width: 600px; margin: 0 auto; padding: 20px; }
        .form-group { margin-bottom: 15px; }
        label { display: block; margin-bottom: 5px; font-weight: bold; }
        input, select, textarea { width: 100%; padding: 8px; border: 1px solid #ddd; border-radius: 4px; }
        button { padding: 10px 20px; background: #007cba; color: white; border: none; border-radius: 4px; cursor: pointer; }
        .navigation { margin: 20px 0; }
        .nav-link { margin-right: 15px; text-decoration: none; color: #007cba; }
        table { width: 100%; border-collapse: collapse; margin: 20px 0; }
        th, td { border: 1px solid #ddd; padding: 10px; text-align: left; }
        th { background: #f5f5f5; }
    </style>
</head>
<body>
    <div class="container">
        <!-- Навигация -->
        <nav class="navigation">
            <a href="#form" class="nav-link">Форма</a>
            <a href="#table" class="nav-link">Таблица</a>
            <a href="#content" class="nav-link">Контент</a>
        </nav>

        <!-- Заголовок -->
        <h1>Тестовый интерфейс для Task 2.1</h1>

        <!-- Форма -->
        <section id="form">
            <h2>Контактная форма</h2>
            <form action="/submit" method="POST">
                <div class="form-group">
                    <label for="name">ФИО:</label>
                    <input type="text" id="name" name="name" required placeholder="Введите ваше имя">
                </div>
                
                <div class="form-group">
                    <label for="email">Email:</label>
                    <input type="email" id="email" name="email" required placeholder="example@mail.com">
                </div>
                
                <div class="form-group">
                    <label for="phone">Телефон:</label>
                    <input type="tel" id="phone" name="phone" pattern="[0-9]{10}" placeholder="9123456789">
                </div>
                
                <div class="form-group">
                    <label for="department">Отдел:</label>
                    <select id="department" name="department">
                        <option value="">Выберите отдел</option>
                        <option value="it">IT</option>
                        <option value="hr">HR</option>
                        <option value="sales">Продажи</option>
                    </select>
                </div>
                
                <div class="form-group">
                    <label for="message">Сообщение:</label>
                    <textarea id="message" name="message" rows="4" placeholder="Введите ваше сообщение..."></textarea>
                </div>
                
                <div class="form-group">
                    <label>
                        <input type="checkbox" name="agreement" required>
                        Согласен с условиями
                    </label>
                </div>
                
                <button type="submit">Отправить</button>
            </form>
        </section>

        <!-- Таблица -->
        <section id="table">
            <h2>Таблица пользователей</h2>
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Имя</th>
                        <th>Email</th>
                        <th>Отдел</th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>1</td>
                        <td>Иван Иванов</td>
                        <td>ivan@mail.com</td>
                        <td>IT</td>
                    </tr>
                    <tr>
                        <td>2</td>
                        <td>Мария Петрова</td>
                        <td>maria@mail.com</td>
                        <td>HR</td>
                    </tr>
                    <tr>
                        <td>3</td>
                        <td>Алексей Сидоров</td>
                        <td>alex@mail.com</td>
                        <td>Продажи</td>
                    </tr>
                </tbody>
            </table>
        </section>

        <!-- Контент -->
        <section id="content">
            <h2>Информационный блок</h2>
            <p>Это тестовый контент для проверки отображения текстовых элементов.</p>
            <ul>
                <li>Пункт списка 1</li>
                <li>Пункт списка 2</li>
                <li>Пункт списка 3</li>
            </ul>
        </section>
    </div>
</body>
</html>
import pytest
import os
from app import read_students_from_md, find_student

class TestStudentData:
    """Тесты для работы с данными студентов"""
    
    def test_read_students_with_new_metrics(self):
        """Тест чтения студентов с новыми метриками"""
        students = read_students_from_md('students.md')
        
        assert len(students) > 0
        student = students[0]
        
        # Проверяем наличие всех новых полей
        assert 'full_name' in student
        assert 'group' in student
        assert 'college' in student
        assert 'admission_year' in student
        assert 'course' in student
        
        # Проверяем типы данных
        assert isinstance(student['full_name'], str)
        assert isinstance(student['group'], str)
        assert isinstance(student['college'], str)
        assert isinstance(student['admission_year'], int)
        assert isinstance(student['course'], int)
    
    def test_find_student_by_full_name(self):
        """Тест поиска студента по ФИО"""
        test_students = [
            {
                'full_name': 'Иванов Иван Иванович',
                'group': 'ТВ-101',
                'college': 'Технический колледж',
                'admission_year': 2023,
                'course': 2
            }
        ]
        
        student = find_student(test_students, 'Иванов Иван Иванович')
        assert student is not None
        assert student['group'] == 'ТВ-101'
        assert student['college'] == 'Технический колледж'
    
    def test_student_metrics_validation(self):
        """Тест валидности метрик студентов"""
        students = read_students_from_md('students.md')
        
        for student in students:
            # Проверяем корректность года поступления
            assert 2000 <= student['admission_year'] <= 2024
            # Проверяем корректность курса
            assert 1 <= student['course'] <= 6
            # Проверяем, что все поля заполнены
            assert student['full_name'] != ''
            assert student['group'] != ''
            assert student['college'] != ''
